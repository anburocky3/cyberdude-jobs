// Prisma schema for jobs

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum JobType {
  fulltime
  internship
}

enum JobStatus {
  open
  expired
}

/// Overall interview pipeline status for an application
enum InterviewProcessStatus {
  pending
  started
  in_progress
  completed
}

/// Final disposition of the application
enum ApplicationResult {
  pending
  hired
  hold
  reject
}

model Job {
  id                      Int           @id @default(autoincrement())
  title                   String
  company                 String
  location                String
  type                    JobType
  workSchedule            String?       @db.VarChar(255)
  workMode                String        @db.VarChar(255)
  compensation            String?       @db.Text
  description             String        @db.Text
  overview                String?       @db.Text
  responsibilities        Json?
  minQualifications       Json?
  preferredQualifications Json?
  perks                   Json?
  team                    String?       @db.VarChar(255)
  startingDate            String?       @db.VarChar(255)
  minDuration             String?       @db.VarChar(64)
  expectedStipend         String?       @db.VarChar(255)
  lastDate                String?       @db.VarChar(64)
  applicationDeadline     String?       @db.VarChar(64)
  status                  JobStatus?
  postedDate              String?       @db.VarChar(64)
  whoCanApply             String?       @db.Text
  skills                  Json?
  openings                Int?
  slug                    String        @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  applications            Application[]
}

model Application {
  id                         Int                    @id @default(autoincrement())
  jobId                      Int
  job                        Job                    @relation(fields: [jobId], references: [id])
  userEmail                  String
  userName                   String?
  profileImage               String?                @db.Text
  gender                     String
  dateOfBirth                String
  mobileNo                   String
  currentStatus              String
  country                    String
  state                      String
  city                       String
  linkedin                   String
  portfolio                  String?
  educationSchool            String
  educationSchoolPercentage  Float
  educationCollege           String
  educationCollegePercentage Float
  workedAlready              Boolean
  companyName                String?
  skills                     Json
  resumeUrl                  String?                @db.Text
  reasonToJoin               String                 @db.Text
  excitedAboutStartup        String                 @db.Text
  cameFrom                   String
  acceptCondition            Boolean
  totalScore                 Int? // Overall score from all screening stages
  interviewProcess           InterviewProcessStatus @default(started)
  result                     ApplicationResult?
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  ScreeningNote              ScreeningNote[]
}

/// HR screening notes and status per application
model ScreeningNote {
  id            Int         @id @default(autoincrement())
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id])
  stage         String      @db.VarChar(64) // hr | technical | manager | team
  verdict       String?     @db.VarChar(32) // shortlist | hold | reject
  score         Int? // 0-100
  notes         String?     @db.Text
  createdBy     String?     @db.VarChar(255)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([applicationId])
}

/// Admin users who can access the admin dashboard
model Admin {
  id           Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  name         String?  @db.VarChar(255)
  passwordHash String   @db.VarChar(255)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
